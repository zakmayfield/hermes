generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----- NEXTAUTH
model Account {
  id      String @id @default(cuid())
  user_id String

  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  user_id      String
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  verificationTokenId String @id @default(cuid())
  userId              String @unique

  identifier String   @unique
  token      String   @unique
  expires    DateTime
  is_valid   Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ----- END NEXTAUTH

// ----- USER
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  lastLoginDate DateTime?

  verificationToken VerificationToken[]
  onboarding        Onboarding?
  permissions       UserPermissions[]

  roleId String
  role   Role   @relation(fields: [roleId], references: [roleId])

  quickbooksToken    QuickbooksToken?
  quickbooksCustomer QuickbooksCustomerSync?

  customerInfo     CustomerInfo?
  customerShipAddr CustomerShipAddr?
  customerBillAddr CustomerBillAddr?

  cartId String?
  cart   Cart?

  orders Order[]

  image    String?
  accounts Account[]
  sessions Session[]
}

model CustomerInfo {
  customerInfoId     String  @id @default(cuid())
  isExistingCustomer Boolean @default(false)
  companyName        String
  givenName          String?
  familyName         String?
  phoneNumber        String?
  userId             String  @unique
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomerShipAddr {
  customerShipAddrId String @id @default(cuid())
  line1              String
  city               String
  country            String
  state              String
  postalCode         String
  userId             String @unique
  user               User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomerBillAddr {
  customerBillAddrId String @id @default(cuid())
  line1              String
  city               String
  country            String
  state              String
  postalCode         String
  userId             String @unique
  user               User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Onboarding {
  onboardingId  String           @id @default(cuid())
  status        OnboardingStatus @default(PENDING)
  isApproved    Boolean          @default(false)
  emailVerified DateTime?
  userId        String           @unique
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum OnboardingStatus {
  COMPLETE
  PENDING
}

model Role {
  roleId String @id @default(cuid())
  name   Roles  @unique

  rolePermissions RolePermissions[]
  users           User[]
}

enum Roles {
  SUPER
  ADMIN
  CUSTOMER
}

enum Permissions {
  APPROVE_CUSTOMER
  CREATE_CUSTOMER
  UPDATE_CUSTOMER
  DELETE_CUSTOMER
  DELETE_ADMIN
  GRANT_PERMISSIONS
  REVOKE_PERMISSIONS
}

model Permission {
  permissionId String      @id @default(cuid())
  name         Permissions @unique
  displayName  String?
  description  String?

  rolePermissions RolePermissions[]
  userPermissions UserPermissions[]
}

model RolePermissions {
  roleId           String
  permissionId     String
  permission_level Int    @default(1)

  role       Role       @relation(fields: [roleId], references: [roleId])
  permission Permission @relation(fields: [permissionId], references: [permissionId], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model UserPermissions {
  userId       String
  permissionId String
  grantedAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [permissionId])

  @@unique([userId, permissionId])
}

model AuthorizedAdmin {
  authorizedAdminId String   @id @default(cuid())
  email             String   @unique
  createdAt         DateTime @default(now())
}

// ----- END USER

// ----- QUICKBOOKS

model QuickbooksToken {
  userQuickbooksTokenId      String   @id @default(cuid())
  userId                     String   @unique
  user                       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                  DateTime @default(now())
  encryptedAccessToken       String
  encryptedRefreshToken      String
  accessTokenExpirationTime  DateTime
  refreshTokenExpirationTime DateTime
  accessTokenIv              String
  refreshTokenIv             String
  realmId                    String
}

model QuickbooksCustomerSync {
  quickbooksCustomerSyncId String @id @default(cuid())
  userId                   String @unique
  user                     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // *** Multiple customers should be able to reference a single customerID ***
  customerId  String
  companyName String
}

// ----- END QUICKBOOKS

// ----- PRODUCTS

model Product {
  productId String @id @default(cuid())
  name      String
  category  String

  units Unit[]
}

model Unit {
  unitId String @id @default(cuid())
  size   String
  price  Float
  code   String

  productId String
  product   Product @relation(fields: [productId], references: [productId], onDelete: Cascade)

  cartsItems CartItem[]
  orderItems OrderItem[]
}

// ----- END PRODUCTS

// ----- CART

model Cart {
  cartId String     @id @default(cuid())
  userId String     @unique
  items  CartItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Junction with a relationship between `Cart` and `Unit`
model CartItem {
  cartItemId String @id @default(cuid())
  cartId     String
  unitId     String

  quantity  Float
  createdAt DateTime @default(now())

  cart Cart @relation(fields: [cartId], references: [cartId], onDelete: Cascade)
  unit Unit @relation(fields: [unitId], references: [unitId])

  @@unique([cartId, unitId])
}

// ----- END CART

// ----- ORDER

model Order {
  orderId   String      @id @default(cuid())
  createdAt DateTime    @default(now())
  items     OrderItem[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Junction with a relationship between `Order` and `CartItem`
model OrderItem {
  orderItemId String @id @default(cuid())
  orderId     String
  unitId      String

  quantity Float

  order Order @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  unit  Unit  @relation(fields: [unitId], references: [unitId])

  @@unique([orderId, unitId])
}

// ----- END ORDER
