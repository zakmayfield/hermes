generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----- NEXTAUTH
model Account {
  id      String @id @default(cuid())
  user_id String

  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  user_id      String
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  verification_token_id String @id @default(cuid())
  user_id               String @unique

  identifier String   @unique
  token      String   @unique
  expires    DateTime
  is_valid   Boolean  @default(true)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// ----- END NEXTAUTH

// ----- USER
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  created_at      DateTime  @default(now())
  last_login_date DateTime?

  verification_token VerificationToken[]
  onboarding         Onboarding?
  permissions        UserPermissions[]
  role               Role                @relation(fields: [role_id], references: [role_id])
  role_id            String
  orders             Order[]

  quickbooks_token    QuickbooksToken?
  quickbooks_customer QuickbooksCustomerSync?

  customerInfo     CustomerInfo?
  customerShipAddr CustomerShipAddr?
  customerBillAddr CustomerBillAddr?

  image    String?
  accounts Account[]
  sessions Session[]
}

model CustomerInfo {
  customer_info_id   String  @id @default(cuid())
  isExistingCustomer Boolean @default(false)
  companyName        String
  givenName          String?
  familyName         String?
  phoneNumber        String?
  user_id            String  @unique
  user               User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model CustomerShipAddr {
  customer_ship_addr_id String @id @default(cuid())
  line1                 String
  city                  String
  country               String
  state                 String
  postalCode            String
  user_id               String @unique
  user                  User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model CustomerBillAddr {
  customer_bill_addr_id String @id @default(cuid())
  line1                 String
  city                  String
  country               String
  state                 String
  postalCode            String
  user_id               String @unique
  user                  User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Onboarding {
  onboarding_id  String           @id @default(cuid())
  status         OnboardingStatus @default(PENDING)
  is_approved    Boolean          @default(false)
  email_verified DateTime?
  user_id        String           @unique
  user           User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum OnboardingStatus {
  COMPLETE
  PENDING
}

model Role {
  role_id String @id @default(cuid())
  name    Roles  @unique

  role_permissions RolePermissions[]
  users            User[]
}

enum Roles {
  SUPER
  ADMIN
  CUSTOMER
}

// TODO: *** Can Auth Quickbooks permission ***
enum Permissions {
  APPROVE_CUSTOMER
  CREATE_CUSTOMER
  UPDATE_CUSTOMER
  DELETE_CUSTOMER
  DELETE_ADMIN
  GRANT_PERMISSIONS
  REVOKE_PERMISSIONS
  // TODO: *** Add additional permissions like creating products, invoice management, ect ***
}

model Permission {
  permission_id String      @id @default(cuid())
  name          Permissions @unique
  display_name  String?
  description   String?

  role_permissions RolePermissions[]
  user_permissions UserPermissions[]
}

model RolePermissions {
  role_id          String
  permission_id    String
  permission_level Int    @default(1)

  role       Role       @relation(fields: [role_id], references: [role_id])
  permission Permission @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade)

  @@unique([role_id, permission_id])
}

model UserPermissions {
  user_id       String
  permission_id String
  granted_at    DateTime @default(now())

  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permission_id], references: [permission_id])

  @@unique([user_id, permission_id])
}

model AuthorizedAdmin {
  authorized_admin_id String   @id @default(cuid())
  email               String   @unique
  created_at          DateTime @default(now())
}

// ----- END USER

// ----- QUICKBOOKS

model QuickbooksToken {
  user_quickbooks_token_id      String   @id @default(cuid())
  user_id                       String   @unique
  user                          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at                    DateTime @default(now())
  encrypted_access_token        String
  encrypted_refresh_token       String
  access_token_expiration_time  DateTime
  refresh_token_expiration_time DateTime
  access_token_iv               String
  refresh_token_iv              String
  realm_id                      String
}

model QuickbooksCustomerSync {
  quickbooks_customer_sync_id String @id @default(cuid())
  user_id                     String @unique
  user                        User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // TODO: *** Multiple customers should be able to reference a single customerID ***
  customer_id  String @unique
  company_name String
}

// ----- END QUICKBOOKS

// ----- PRODUCTS

model Product {
  product_id String @id @default(cuid())
  name       String
  category   String
  units      Unit[]
}

model Unit {
  unit_id     String      @id @default(cuid())
  size        String
  price       Float
  code        String
  product_id  String
  product     Product     @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  order_items OrderItem[]
}

// ----- END PRODUCTS

// ----- ORDER

model Order {
  order_id    String      @id @default(cuid())
  user_id     String
  order_items OrderItem[]
  created_at  DateTime    @default(now())
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model OrderItem {
  order_item_id String @id @default(cuid())
  order_id      String
  unit_id       String
  quantity      Int
  order         Order  @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  unit          Unit   @relation(fields: [unit_id], references: [unit_id])
}

// ----- END ORDER
